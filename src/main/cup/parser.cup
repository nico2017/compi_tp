package lyc.compiler;

import java_cup.runtime.*;
import java.util.LinkedList;

class Parser;

parser code{:


    int auxTercRepeat_init=0,auxTercRepeat_fin=0,auxTercOR=0;
    String operaIf = "";
    LinkedList<Integer> pilaExp         = new LinkedList<Integer>();
    LinkedList<Integer> pilaIfSaltos    = new LinkedList<Integer>();
    LinkedList<Integer> pilaIfSaltosAND    = new LinkedList<Integer>();
    LinkedList<Integer> pilaWhileSaltos    = new LinkedList<Integer>();
    LinkedList<Integer> pilaWhileSaltos2    = new LinkedList<Integer>();
    LinkedList<Integer> pilaCaseSaltos    = new LinkedList<Integer>();

    public class Terceto {
        public static int sentence,condicionWhile,assignment,expression,term,factor,programa,bloque,declaracion,iteracion,seleccion,escribiendo,leyendo,wr_data
                ,condicion,comparacion,comparador,comment,selCase,listCase,functionRepeatInline,listVar,decc,variablesListadas;

        private static int  contador;
        public static String  terc = "";

        public static int crearTerceto(String i,String ii,String iii){
            contador++;
            terc+="["+contador+"] ";
            terc+= "("+i+","+ii+","+iii+")\n";
            return contador;
        }


        public static void guardarTercetos(){
            sentence=assignment=expression=term=factor=programa=bloque=declaracion=iteracion=seleccion=escribiendo=leyendo=wr_data
                    =condicion=comparacion=condicionWhile=comparador=comment=selCase=listCase=functionRepeatInline=listVar=
                    decc=variablesListadas = 0;
            contador = 0;
            System.out.println(terc);
            terc = "";
        }
    }
 :}

// Terminals
terminal COMENTARIOS;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal KEYOPEN;
terminal KEYCLOSE;
terminal CORCHOPEN;
terminal CORCHCLOSE;
terminal ENDDO ;
terminal DO ;
terminal CASE ;
terminal DEFAULT;
terminal REPEAT;
terminal IF;
terminal WHILE;
terminal ELSE;
terminal PTO;
terminal WRITES;
terminal READ;
terminal AND;
terminal NOT;
terminal OR;
terminal DECSTR;
terminal DECINT;
terminal DECFLOAT;
terminal VOID;
terminal DOSPUNTOS;
terminal PTOCOMA;
terminal INIT;
terminal COMA;
terminal CMP_DIST;
terminal CMP_IGUAL;
terminal CMP_MA	;
terminal CMP_MA_IGUAL ;
terminal CMP_ME	;
terminal CMP_ME_IGUAL ;
terminal FLOATCONSTANT ;
terminal STRCONSTANT ;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;


// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal bloque;
non terminal declaracion;
non terminal iteracion;
non terminal seleccion;
non terminal escribiendo;
non terminal leyendo;
non terminal wr_data;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal comment;
non terminal selCase;
non terminal listCase;
non terminal functionRepeatInline;
non terminal listVar;
non terminal variablesListadas;
non terminal decc;
non terminal condicionWhile;
// Start Symbol Definition
start with programa;

programa ::= bloque{: System.out.println("BLOQUE ES PROGRAMA = End");  Terceto.guardarTercetos();  :};

bloque ::= bloque sentence {: System.out.println("BLOQUE + SETENCIA ES BLOQUE"); :}
           |sentence {: System.out.println("SEnTENCIA ES BLOQUE"); :};
sentence ::= declaracion{: System.out.println("DECLARACIoN ES SENTENCIA"); :}
               |iteracion{: System.out.println("ITERACION ES SENTENCIA"); :}
               |seleccion{: System.out.println("SELECCION ES SENTENCIA"); :}
               |escribiendo{: System.out.println("WRITE ES SENTENCIA"); :}
               |leyendo {: System.out.println("READ ES SENTENCIA"); :}
               |assignment {: System.out.println("ASIGNACIoN ES SENTENCIA"); :}
               |comment {: System.out.println("COMENTARIOS ES SENTENCIA"); :}
               |functionRepeatInline {: System.out.println("COMENTARIOS ES SENTENCIA"); :};

declaracion::=
    INIT KEYOPEN
        listVar
     KEYCLOSE;
listVar::=
        listVar  variablesListadas DOSPUNTOS decc
        |variablesListadas DOSPUNTOS decc;
decc::= DECFLOAT|DECSTR|DECINT;

variablesListadas::=
        variablesListadas COMA IDENTIFIER
        |IDENTIFIER;


functionRepeatInline::= REPEAT INTEGER_CONSTANT:constant
                                {:  auxTercRepeat_init = Terceto.contador+1;
                                    Terceto.crearTerceto("ETIQ_REPEAT_INIT"+auxTercRepeat_init,"_","_");
                                    Terceto.crearTerceto(""+constant,"_","_");
                                    Terceto.crearTerceto("_INT_AUX_REPEAT"+auxTercRepeat_init,"_","_");
                                    Terceto.crearTerceto("CMP","_","_");
                                    Terceto.crearTerceto("BGT","_ETIQ_"+(Terceto.contador+1),"_");
                                    auxTercRepeat_fin = Terceto.contador;:}
                                    CORCHOPEN bloque CORCHCLOSE
                                {:  Terceto.crearTerceto("_INT_AUX_REPEAT"+auxTercRepeat_init,"_","_");
                                    Terceto.crearTerceto("1","_","_");
                                    Terceto.crearTerceto("-","_INT_AUX_REPEAT"+auxTercRepeat_init,"["+Terceto.contador+"]");
                                    Terceto.crearTerceto("=","_INT_AUX_REPEAT"+auxTercRepeat_init,"["+Terceto.contador+"]");
                                    Terceto.crearTerceto("BRA","ETIQ_REPEAT_INIT"+auxTercRepeat_init,"_");
                                    Terceto.crearTerceto("_ETIQ_"+auxTercRepeat_fin,"_","_");:};
comment::= COMENTARIOS;
escribiendo ::= WRITES OPEN_BRACKET wr_data CLOSE_BRACKET ;
wr_data ::= IDENTIFIER:id {: Terceto.crearTerceto("WRITE",""+id,"_"); :}| STRCONSTANT:constant{: Terceto.crearTerceto("WRITE",""+constant,"_"); :};
leyendo::= READ OPEN_BRACKET IDENTIFIER:id {: Terceto.crearTerceto("READ",""+id,"_"); :} CLOSE_BRACKET ;

iteracion::=
	WHILE  OPEN_BRACKET
	    {:  Terceto.crearTerceto("ETIQ_INIT_WHILE"+(Terceto.contador+1),"_","_");
	        pilaWhileSaltos2.add(Terceto.contador);:} condicionWhile CLOSE_BRACKET KEYOPEN
	bloque
	    {:  int whileSaltoAux = pilaWhileSaltos2.removeLast();
	        Terceto.crearTerceto("BRANCH","ETIQ_INIT_WHILE"+whileSaltoAux,"");
	        whileSaltoAux = pilaWhileSaltos.removeLast();
	        Terceto.crearTerceto("_ETIQ_"+whileSaltoAux,"_","_"); :}
	KEYCLOSE;

condicionWhile::=
     comparacion AND comparacion
    |comparacion OR comparacion  {: System.out.println("OR es condicion"); :}
    |comparacion {: Terceto.crearTerceto("CMP","_","_");
                    Terceto.condicionWhile=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                    pilaWhileSaltos.add(Terceto.condicionWhile);:}
    |NOT OPEN_BRACKET comparacion CLOSE_BRACKET;


selCase::= DO  IDENTIFIER
              listCase
             DEFAULT bloque
        ENDDO;
selCase::=DO IDENTIFIER
              listCase
        ENDDO
        ;
listCase::=
        listCase CASE condicion bloque
            {:  int saltoCase = pilaCaseSaltos.removeLast();
                Terceto.crearTerceto("BRA","ETIQ_CASE_FIN"+saltoCase,"_");
                pilaCaseSaltos.add(saltoCase);
                int ifSaltoAux = pilaIfSaltos.removeLast();
                Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :};
listCase::=CASE condicion bloque
            {:
                int saltoCase = pilaCaseSaltos.removeLast();
                Terceto.crearTerceto("BRA","ETIQ_CASE_FIN"+saltoCase,"_");
                pilaCaseSaltos.add(saltoCase);
                int ifSaltoAux = pilaIfSaltos.removeLast();
                Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :};
seleccion::=
             	IF OPEN_BRACKET condicion  CLOSE_BRACKET KEYOPEN bloque
              KEYCLOSE  {: int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.crearTerceto("BRANCH","_ETIQ_"+(Terceto.contador+1),"");
                            pilaIfSaltos.add(Terceto.contador);
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
                            ELSE KEYOPEN bloque KEYCLOSE
                        {: int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
             	|IF  OPEN_BRACKET condicion  CLOSE_BRACKET  KEYOPEN bloque KEYCLOSE
                        {:  int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
             	|IF  OPEN_BRACKET condicion CLOSE_BRACKET sentence
                        {:  int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
             	|{:pilaCaseSaltos.add(Terceto.contador+1);:} selCase {:int casePila = pilaCaseSaltos.removeLast();Terceto.crearTerceto("ETIQ_CASE_FIN"+casePila,"_","_");:};

condicion::=
	 comparacion {:Terceto.crearTerceto("CMP","_","_");Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_"); pilaIfSaltos.add(Terceto.condicion);:} AND comparacion {:Terceto.crearTerceto("CMP","_","_");System.out.println("aca!!!!");int x = pilaIfSaltos.removeLast();Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+x,"_");pilaIfSaltos.add(x); :}
	|comparacion {: Terceto.crearTerceto("CMP","_","_");
                    String et = "_ETIQ_"+(Terceto.contador+1);
	                Terceto.condicion=Terceto.crearTerceto(""+operaIf,et,"_");
	                Terceto.condicion = Terceto.crearTerceto("BRA","_ETIQ_"+(Terceto.contador+1),"_");
	                pilaIfSaltos.add(Terceto.condicion);
                    Terceto.crearTerceto(et,"_","_");
	                :}OR  comparacion  {:
	                    Terceto.crearTerceto("CMP","_","_");
	                    int x = pilaIfSaltos.removeLast();
                        Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                        pilaIfSaltos.add(Terceto.condicion);
                        Terceto.crearTerceto("_ETIQ_"+x,"_","_");
	                :}
	|comparacion {:Terceto.crearTerceto("CMP","_","_");Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_"); pilaIfSaltos.add(Terceto.condicion);:}
	|NOT OPEN_BRACKET comparacion CLOSE_BRACKET;
comparacion::= expression comparador expression ;
comparador::=
	CMP_MA_IGUAL    {:operaIf = "BLT";:}
	|CMP_ME_IGUAL   {:operaIf = "BGT";:}
	|CMP_ME         {:operaIf = "BGE";:}
	|CMP_MA         {:operaIf = "BLE";:}
	|CMP_IGUAL      {:operaIf = "BNE";:}
	|CMP_DIST       {:operaIf = "BEQ";:};

assignment::= IDENTIFIER:id ASSIG STRCONSTANT:constant{:Terceto.crearTerceto("=",""+id,""+constant);:};
assignment ::= IDENTIFIER:id ASSIG expression {: Terceto.assignment=Terceto.crearTerceto("=",""+id,"TERC"+Terceto.expression);  :};
expression ::= expression PLUS term {:Terceto.expression=Terceto.crearTerceto("+","TERC"+Terceto.expression,"TERC"+Terceto.term);System.out.print(",2");:};
expression ::= expression SUB term {:Terceto.expression=Terceto.crearTerceto("-","TERC"+Terceto.expression,"TERC"+Terceto.term); System.out.print(",3");:};
expression ::= term {:Terceto.expression= Terceto.term;System.out.println("ACA1"); System.out.print(",4"); :};
term ::= term MULT factor {:Terceto.term=Terceto.crearTerceto("*","TERC"+Terceto.term,"TERC"+Terceto.factor); System.out.print(",5"); :};
term ::= term DIV factor {:Terceto.term=Terceto.crearTerceto("/","TERC"+Terceto.term,"TERC"+Terceto.factor); System.out.print(",6"); :};
term ::= factor {:Terceto.term = Terceto.factor; System.out.print(",7"); :};
factor ::= IDENTIFIER:id  {: Terceto.factor=Terceto.crearTerceto(""+id,"_","_");System.out.print(",8"); :};
factor ::= INTEGER_CONSTANT:constant {:Terceto.factor=Terceto.crearTerceto(""+constant,"_","_"); System.out.print(",9"); :};
factor ::= FLOATCONSTANT:constant {:Terceto.factor=Terceto.crearTerceto(""+constant,"_","_"); System.out.print(",10" ); :};
factor ::= {:pilaExp.add(Terceto.expression);:}OPEN_BRACKET expression CLOSE_BRACKET {:Terceto.factor = Terceto.expression;Terceto.expression = pilaExp.removeLast(); System.out.print(",11"); :};