package lyc.compiler;

import java_cup.runtime.*;
import java.util.LinkedList;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.FileOutputWriter;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.FileReader;

class Parser;

parser code{:


    int auxTercRepeat_init=0,auxTercRepeat_fin=0,auxTercOR=0, cont=0,aux_terceto=0;
    String operaIf = "";
    LinkedList<Integer> pilaExp         = new LinkedList<Integer>();
    LinkedList<Integer> pilaIfSaltos    = new LinkedList<Integer>();
    LinkedList<Integer> pilaIfSaltosAND    = new LinkedList<Integer>();
    LinkedList<Integer> pilaWhileSaltos    = new LinkedList<Integer>();
    LinkedList<Integer> pilaWhileSaltos2    = new LinkedList<Integer>();
    LinkedList<Integer> pilaCaseSaltos    = new LinkedList<Integer>();
    LinkedList<String>  listVariables    = new LinkedList<String>();
    public class Terceto {
        public static int sentence,condicionWhile,assignment,expression,term,factor,programa,bloque,declaracion,iteracion,seleccion,escribiendo,leyendo,wr_data
                ,condicion,comparacion,comparador,comment,selCase,listCase,functionRepeatInline,listVar,decc,variablesListadas;

        private static int  contador;
        public static   String terc = "";
        public static   String cteInt = "";
        public static   String cteStr = "";
        public static   String cteFloat = "";
        public static   String identif = "";
        public static   String tableCSV = "";

        public static void actualizarEtiqueta(String etiqueta,int indexTerceto){
            System.out.println("Dentro de actualizar: "+etiqueta+" por "+indexTerceto+" - "+Terceto.terc+"\n ------");
            Terceto.terc = (Terceto.terc).replace(etiqueta, "["+indexTerceto+"]");
        }
        public static int crearTerceto(String i,String ii,String iii){
            contador++;
            terc+="["+contador+"]&&";
            terc+= "("+i+","+ii+","+iii+")\n";
            return contador;
        }


        public static void guardarTercetos(){
            sentence=assignment=expression=term=factor=programa=bloque=declaracion=iteracion=seleccion=escribiendo=leyendo=wr_data
                    =condicion=comparacion=condicionWhile=comparador=comment=selCase=listCase=functionRepeatInline=listVar=
                    decc=variablesListadas = 0;
            contador = 0;
            System.out.println(terc);

            SymbolTableGenerator s = new SymbolTableGenerator();
            s.setTableSymbol(terc);
            FileOutputWriter.writeOutput("tercetos-semantica.txt",s);

            terc = "";
        }
        public static String invertirComparador(String operador){

            	if(operador.equals("BLT")) return "BGE";
            	if(operador.equals( "BGT")) return "BLE";
            	if(operador.equals( "BGE")) return "BLT";
            	if(operador.equals( "BLE")) return "BGT";
            	if(operador.equals( "BNE")) return "BEQ";
            	if(operador.equals( "BEQ")) return "BNE";

            	return null;
        }
        public static void insertarElementoEnTS(String nombre, String valor,String tipo,int esConstant){

            if(esConstant == 1){
                //ES VARIABLE. VALIDO QUE NO ESTE REPETIDO. SINO EXIT
                if((Terceto.tableCSV).contains(nombre+";"+valor+";")){
                    //Variable ya existe. corto compilación por error de duplicación
                    System.out.println("No es posible redeclarar la variable "+nombre+" con diferentes tipos");
                    System.exit(1);
                }else{
                    //No está repetido. agrego a tabla
                    Terceto.tableCSV+=nombre+";"+valor+";"+tipo+";variable\n";
                }
            }else {
                if(!(Terceto.tableCSV).contains(nombre+";"+valor+";"+tipo)){
                    //Constante todavía no existe. la agrego
                    Terceto.tableCSV+=nombre+";"+valor+";"+tipo+";cte\n";
                }
            }
        }

        public static void guardarTS(){
            SymbolTableGenerator s = new SymbolTableGenerator();
            s.setTableSymbol(Terceto.tableCSV);
            FileOutputWriter.writeOutput("symbol-table1.txt",s);
        }

        public static void generarASM(){
        String[] linea =null ;
        String lineas = "";
        String codigoASMTS = "";
        try {
            Scanner entrada = new Scanner(new FileReader("target/output/symbol-table1.txt"));
            while (entrada.hasNextLine()) {
                linea = entrada.nextLine().split(";");
                if(linea[3].equals("variable")){
                    if(linea[2].equals("String")){
                        codigoASMTS+= "_"+linea[0]+" db  MAXTEXTSIZE dup (?),'$'\n";
                    }else{
                        codigoASMTS+= "_"+linea[0]+" dd  ? \n";
                    }
                }else{

                    if(linea[2].equals("Int")){
                        codigoASMTS+= "_"+linea[0]+" dd "+linea[1]+".0 \n";
                    }else if(linea[2].equals("Float")){

                        codigoASMTS+= "_"+linea[0]+" dd  "+linea[0]+" \n";
                    }else{
                        String aux_str =linea[0] ;
                        linea[0] = linea[0].replace("\"","");
                        linea[0] = linea[0].replace(" ","_");

                        codigoASMTS+= "_"+linea[0]+" db  "+aux_str+",'$', "+aux_str.length()+" dup (?) \n";
                    }
                }
            }
        }catch (FileNotFoundException e) {}

            try {
                Scanner entrada = new Scanner(new FileReader("target/output/tercetos-semantica.txt"));
                while (entrada.hasNextLine()) {
                    linea = entrada.nextLine().split("&&");
                    linea[1] = linea[1].replace("(","");
                    linea[1] = linea[1].replace(")","");
                    lineas += linea[1]+"\n";
                    //System.out.println("dato. "+linea[1]);
                }

                System.out.println(lineas);
                entrada.close();
                String[] arrTercetos = lineas.split("\n");
                String codigoASM = "";
                for (int i = 0; i < arrTercetos.length; i++){
                    String [] datos = arrTercetos[i].split(",");
                    if(
                        datos[0].equals("BLT") ||
                        datos[0].equals("BGT") ||
                        datos[0].equals("BGE") ||
                        datos[0].equals("BLE") ||
                        datos[0].equals("BNE") ||
                        datos[0].equals("BEQ") ||
                        datos[0].equals("BRA")){
                        String puntero = datos[1].replace("[","").replace("]","");
                        String [] datos2 = arrTercetos[(Integer.parseInt(puntero)-1)].split(",");
                        datos[0] = datos[0].replace("BRA","BI");
                        codigoASM+= datos[0]+" "+datos2[0]+"\n";
                    }
                    if(datos[0].equals("CMP")){
                        String puntero = datos[1].replace("[","").replace("]","");
                        String puntero2 = datos[2].replace("[","").replace("]","");
                        codigoASM+="ffree\n";
                        codigoASM+="fld _@aux_exp_"+puntero+"\n";
                        codigoASM+="fld _@aux_exp_"+puntero2+"\n";
                        codigoASM+="fxch\n";
                        codigoASM+="fcom\n";
                        codigoASM+="fstsw ax\n";
                        codigoASM+="sahf\n";
                    }
                    if(datos[0].contains("ETIQ_")){
                        codigoASM+=datos[0]+":\n";
                    }
                    if(datos[1].equals("_") && datos[2].equals("_") && !datos[0].contains("ETIQ_") ){

                        //NO ES STRING
                        codigoASM+="fld _"+datos[0]+"\n";
                        codigoASM+="fstp _@aux_exp_"+(i+1)+"\n";
                        codigoASMTS+= "_@aux_exp_"+(i+1)+" dd  ?  \n";


                    }
                    if(datos[0].equals("+") ){
                        String puntero = datos[1].replace("[","").replace("]","");
                        String puntero2 = datos[2].replace("[","").replace("]","");
                        codigoASM+="ffree\n";
                        codigoASM+="fld _@aux_exp_"+puntero+"\n";
                        codigoASM+="fld _@aux_exp_"+puntero2+"\n";
                        codigoASM+="fadd \n";
                        codigoASM+="fstp _@aux_exp_"+(i+1)+"\n";

                        codigoASMTS+= "_@aux_exp_"+(i+1)+" dd  ?  \n";
                    }
                    if(datos[0].equals("*") ){
                        String puntero = datos[1].replace("[","").replace("]","");
                        String puntero2 = datos[2].replace("[","").replace("]","");
                        codigoASM+="ffree\n";
                        codigoASM+="fld _@aux_exp_"+puntero+"\n";
                        codigoASM+="fld _@aux_exp_"+puntero2+"\n";
                        codigoASM+="fmul \n";
                        codigoASM+="fstp _@aux_exp_"+(i+1)+"\n";
                        codigoASMTS+= "_@aux_exp_"+(i+1)+" dd  ?  \n";
                    }
                    if(datos[0].equals("/") ){
                        String puntero = datos[1].replace("[","").replace("]","");
                        String puntero2 = datos[2].replace("[","").replace("]","");
                        codigoASM+="ffree\n";
                        codigoASM+="fld _@aux_exp_"+puntero+"\n";
                        codigoASM+="fld _@aux_exp_"+puntero2+"\n";
                        codigoASM+="fdiv \n";
                        codigoASM+="fstp _@aux_exp_"+(i+1)+"\n";
                        codigoASMTS+= "_@aux_exp_"+(i+1)+" dd  ?  \n";
                    }
                    if(datos[0].equals("-") ){
                        String puntero = datos[1].replace("[","").replace("]","");
                        String puntero2 = datos[2].replace("[","").replace("]","");
                        codigoASM+="ffree\n";
                        codigoASM+="fld _@aux_exp_"+puntero+"\n";
                        codigoASM+="fld _@aux_exp_"+puntero2+"\n";
                        codigoASM+="fsub \n";
                        codigoASM+="fstp _@aux_exp_"+(i+1)+"\n";

                        codigoASMTS+= "_@aux_exp_"+(i+1)+" dd  ?  \n";
                    }
                    if(datos[0].equals("=") ){
                        if(!datos[2].contains("\"")){
                            String puntero2 = datos[2].replace("[","").replace("]","");
                            codigoASM+="ffree\n";
                            codigoASM+="fld _@aux_exp_"+puntero2+"\n";
                            codigoASM+="fstp "+datos[1]+"\n";
                        }else{
                            datos[2] = datos[2].replace("\"","").replace(" ","_");
                            codigoASM+="fld _"+datos[2]+"\n";
                            codigoASM+="fstp "+datos[1]+"\n";
                        }

                    }
                    if(datos[0].equals("WRITE") ){
                        datos[1] = datos[1].replace("\"","").replace(" ","_");
                        codigoASM+="mov dx,OFFSET _"+datos[1]+"\n";
                        codigoASM+="mov ah,9 \n";
                        codigoASM+="int 21h\n";
                        codigoASM+="newLine 1\n";
                    }
                    if(datos[0].equals("READ") ){
                        codigoASM+="getString _"+datos[1]+"\n";
                    }
                }
                System.out.println("include macros2.asm \ninclude number.asm \n.MODEL  LARGE \n.386 \n.STACK 200h \n.DATA \n"+codigoASMTS+"\n.CODE \n MAIN:\nMOV AX,@DATA   ;inicializa el segmento de datos\nMOV DS,AX \nMOV ES,AX \nFNINIT \n"+codigoASM);
            } catch (FileNotFoundException e) {}

        }
    }
 :}

// Terminals
terminal COMENTARIOS;
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal KEYOPEN;
terminal KEYCLOSE;
terminal CORCHOPEN;
terminal CORCHCLOSE;
terminal ENDDO ;
terminal DO ;
terminal CASE ;
terminal DEFAULT;
terminal REPEAT;
terminal IF;
terminal WHILE;
terminal ELSE;
terminal PTO;
terminal WRITES;
terminal READ;
terminal AND;
terminal NOT;
terminal OR;
terminal DECSTR;
terminal DECINT;
terminal DECFLOAT;
terminal VOID;
terminal DOSPUNTOS;
terminal PTOCOMA;
terminal INIT;
terminal COMA;
terminal CMP_DIST;
terminal CMP_IGUAL;
terminal CMP_MA	;
terminal CMP_MA_IGUAL ;
terminal CMP_ME	;
terminal CMP_ME_IGUAL ;
terminal FLOATCONSTANT ;
terminal STRCONSTANT ;
terminal INTEGER_CONSTANT;
terminal IDENTIFIER;


// Non Terminals
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal bloque;
non terminal declaracion;
non terminal iteracion;
non terminal seleccion;
non terminal escribiendo;
non terminal leyendo;
non terminal wr_data;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal comment;
non terminal selCase;
non terminal listCase;
non terminal functionRepeatInline;
non terminal listVar;
non terminal variablesListadas;
non terminal decc;
non terminal condicionWhile;
// Start Symbol Definition
start with programa;

programa ::= bloque{:Terceto.guardarTS();Terceto.guardarTercetos();Terceto.generarASM();  :};

bloque ::= bloque sentence {: System.out.println("BLOQUE + SETENCIA ES BLOQUE"); :}
           |sentence {: System.out.println("SEnTENCIA ES BLOQUE"); :};
sentence ::= declaracion{: System.out.println("DECLARACIoN ES SENTENCIA"); :}
               |iteracion{: System.out.println("ITERACION ES SENTENCIA"); :}
               |seleccion{: System.out.println("SELECCION ES SENTENCIA"); :}
               |escribiendo{: System.out.println("WRITE ES SENTENCIA"); :}
               |leyendo {: System.out.println("READ ES SENTENCIA"); :}
               |assignment {: System.out.println("ASIGNACIoN ES SENTENCIA"); :}
               |comment {: System.out.println("COMENTARIOS ES SENTENCIA"); :}
               |functionRepeatInline {: System.out.println("COMENTARIOS ES SENTENCIA"); :};

declaracion::=
    INIT KEYOPEN
        listVar
     KEYCLOSE;
listVar::=
        listVar  variablesListadas DOSPUNTOS decc
        |variablesListadas DOSPUNTOS decc;
decc::= DECFLOAT  {:
                    while(!listVariables.isEmpty()){
                        String v = listVariables.remove();
                        Terceto.insertarElementoEnTS(v,v,"Float",1);
                    }
 System.out.println("Real"); :};
decc::= DECSTR  {:

                    while(!listVariables.isEmpty()){
                        String v = listVariables.remove();
                        Terceto.insertarElementoEnTS(v,v,"String",1);
                    }
 System.out.println("Cadena"); :};
decc::= DECINT {:
                     while(!listVariables.isEmpty()){
                         String v = listVariables.remove();
                         Terceto.insertarElementoEnTS(v,v,"Int",1);
                     }


 System.out.println("Entero"); :};

variablesListadas::=  variablesListadas COMA IDENTIFIER:id {:listVariables.add(""+id); System.out.println("Variable"); cont++; :};
variablesListadas::=  IDENTIFIER:id {:listVariables.add(""+id); System.out.println("Variable"); cont=1; :};


functionRepeatInline::= REPEAT INTEGER_CONSTANT:constant
                                {:  Terceto.insertarElementoEnTS(""+constant,""+constant,"Int",0);
                                    auxTercRepeat_init = Terceto.contador+1;
                                    Terceto.crearTerceto("ETIQ_REPEAT_INIT"+auxTercRepeat_init,"_","_");
                                    Terceto.crearTerceto(""+constant,"_","_");
                                    Terceto.crearTerceto("INT_AUX_REPEAT"+auxTercRepeat_init,"_","_");
                                    aux_terceto = Terceto.contador;
                                    Terceto.insertarElementoEnTS("INT_AUX_REPEAT"+auxTercRepeat_init,"1","Int",0);
                                    Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
                                    Terceto.crearTerceto("BGT","_ETIQ_"+(Terceto.contador+1),"_");
                                    auxTercRepeat_fin = Terceto.contador;:}
                                    CORCHOPEN bloque CORCHCLOSE
                                {:  int aux  = Terceto.crearTerceto("INT_AUX_REPEAT"+auxTercRepeat_init,"_","_");
                                    int aux2 = Terceto.crearTerceto("1","_","_");
                                    Terceto.insertarElementoEnTS("1","1","Int",0);
                                    Terceto.crearTerceto("+","["+aux+"]","["+aux2+"]");
                                    Terceto.crearTerceto("=","INT_AUX_REPEAT"+auxTercRepeat_init,"["+(Terceto.contador)+"]");
                                    Terceto.crearTerceto("BRA","["+auxTercRepeat_init+"]","_");
                                    Terceto.actualizarEtiqueta("_ETIQ_"+auxTercRepeat_fin,Terceto.contador+1);
                                    Terceto.crearTerceto("_ETIQ_"+auxTercRepeat_fin,"_","_");:};
comment::= COMENTARIOS;
escribiendo ::= WRITES OPEN_BRACKET wr_data CLOSE_BRACKET ;
wr_data ::= IDENTIFIER:id {: Terceto.crearTerceto("WRITE",""+id,"_"); :}| STRCONSTANT:constant{:Terceto.insertarElementoEnTS(""+constant,""+constant,"String",0); String s =   String.valueOf(constant); Terceto.crearTerceto("WRITE",""+((s.replace(" ","_")).replace(",",";")),"_"); :};
leyendo::= READ OPEN_BRACKET IDENTIFIER:id {: Terceto.crearTerceto("READ",""+id,"_"); :} CLOSE_BRACKET ;

iteracion::=
	WHILE  OPEN_BRACKET
	    {:  Terceto.crearTerceto("ETIQ_INIT_WHILE"+(Terceto.contador+1),"_","_");
	        pilaWhileSaltos2.add(Terceto.contador);:} condicionWhile CLOSE_BRACKET KEYOPEN
	bloque
	    {:  int whileSaltoAux = pilaWhileSaltos2.removeLast();
	        Terceto.crearTerceto("BRA","["+whileSaltoAux+"]","_");

	        whileSaltoAux = pilaWhileSaltos.removeLast();
	        Terceto.actualizarEtiqueta("_ETIQ_"+whileSaltoAux,Terceto.contador+1);
	        Terceto.crearTerceto("_ETIQ_"+whileSaltoAux,"_","_");:}

	KEYCLOSE;

condicionWhile::=

    comparacion {:
                        Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
                        Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                        pilaWhileSaltos.add(Terceto.condicion);:} AND comparacion {:Terceto.crearTerceto("CMP","_","_");int x = pilaWhileSaltos.removeLast();Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+x,"_");pilaWhileSaltos.add(x); :}
	|comparacion {: Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
                    String etw = "_ETIQ_"+(Terceto.contador+1);
	                 Terceto.condicion=Terceto.crearTerceto(""+operaIf,etw,"_");
	                 Terceto.condicion = Terceto.crearTerceto("BRA","_ETIQ_"+(Terceto.contador+1),"_");
	                pilaWhileSaltos.add(Terceto.condicion);
	                Terceto.actualizarEtiqueta(etw,Terceto.contador+1);
                    Terceto.crearTerceto(etw,"_","_");
	                :}OR  comparacion  {:
	                    Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
	                    int x = pilaWhileSaltos.removeLast();
                        Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                        pilaWhileSaltos.add(Terceto.condicion);
                        Terceto.actualizarEtiqueta("_ETIQ_"+x,Terceto.contador+1);
                        Terceto.crearTerceto("_ETIQ_"+x,"_","_");
	                :}
    |comparacion {: Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
                    Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                    pilaWhileSaltos.add(Terceto.condicion);:}

    |NOT OPEN_BRACKET comparacion CLOSE_BRACKET{:
                                                   String aux_operaIf = Terceto.invertirComparador(operaIf);
                                                   Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
                                                   Terceto.condicion=Terceto.crearTerceto(""+aux_operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                                                   pilaWhileSaltos.add(Terceto.condicion);:};


selCase::= DO  IDENTIFIER
              listCase
             DEFAULT bloque
        ENDDO;
selCase::=DO IDENTIFIER
              listCase
        ENDDO
        ;
listCase::=
        listCase CASE condicion bloque
            {:  int saltoCase = pilaCaseSaltos.removeLast();
                Terceto.crearTerceto("BRA","ETIQ_CASE_FIN"+saltoCase,"_");
                pilaCaseSaltos.add(saltoCase);
                int ifSaltoAux = pilaIfSaltos.removeLast();
                Terceto.actualizarEtiqueta("_ETIQ_"+ifSaltoAux,Terceto.contador+1);
                Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :};
listCase::=CASE condicion bloque
            {:
                int saltoCase = pilaCaseSaltos.removeLast();
                Terceto.crearTerceto("BRA","ETIQ_CASE_FIN"+saltoCase,"_");
                pilaCaseSaltos.add(saltoCase);
                int ifSaltoAux = pilaIfSaltos.removeLast();
                Terceto.actualizarEtiqueta("_ETIQ_"+ifSaltoAux,Terceto.contador+1);
                Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :};
seleccion::=
             	IF OPEN_BRACKET condicion  CLOSE_BRACKET KEYOPEN bloque
              KEYCLOSE  {: int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.crearTerceto("BRA","["+(Terceto.contador+1)+"]","_");
                            pilaIfSaltos.add(Terceto.contador);
                            Terceto.actualizarEtiqueta("_ETIQ_"+ifSaltoAux,Terceto.contador+1);
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
                            ELSE KEYOPEN bloque KEYCLOSE
                        {: int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.actualizarEtiqueta("_ETIQ_"+ifSaltoAux,Terceto.contador+1);
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
             	|IF  OPEN_BRACKET condicion  CLOSE_BRACKET  KEYOPEN bloque KEYCLOSE
                        {:  int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.actualizarEtiqueta("_ETIQ_"+ifSaltoAux,Terceto.contador+1);
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
             	|IF  OPEN_BRACKET condicion CLOSE_BRACKET sentence
                        {:  int ifSaltoAux = pilaIfSaltos.removeLast();
                            Terceto.actualizarEtiqueta("_ETIQ_"+ifSaltoAux,Terceto.contador+1);
                            Terceto.crearTerceto("_ETIQ_"+ifSaltoAux,"_","_"); :}
             	|{:pilaCaseSaltos.add(Terceto.contador+1);:} selCase {:int casePila = pilaCaseSaltos.removeLast();Terceto.actualizarEtiqueta("ETIQ_CASE_FIN"+casePila,Terceto.contador+1);Terceto.crearTerceto("ETIQ_CASE_FIN"+casePila,"_","_");:};

condicion::=
	 comparacion {:Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_"); pilaIfSaltos.add(Terceto.condicion);:} AND comparacion {:Terceto.crearTerceto("CMP","_","_"); int x = pilaIfSaltos.removeLast();Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+x,"_");pilaIfSaltos.add(x); :}
	|comparacion {: Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
                    String et = "_ETIQ_"+(Terceto.contador+1);
	                Terceto.condicion=Terceto.crearTerceto(""+operaIf,et,"_");
	                Terceto.condicion = Terceto.crearTerceto("BRA","_ETIQ_"+(Terceto.contador+1),"_");
	                pilaIfSaltos.add(Terceto.condicion);
	                Terceto.actualizarEtiqueta(et,Terceto.contador+1);
                    Terceto.crearTerceto(et,"_","_");
	                :}OR  comparacion  {:
	                    Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");
	                    int x = pilaIfSaltos.removeLast();
                        Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_");
                        pilaIfSaltos.add(Terceto.condicion);
                        Terceto.actualizarEtiqueta("_ETIQ_"+x,Terceto.contador+1);
                        Terceto.crearTerceto("_ETIQ_"+x,"_","_");
	                :}
	|comparacion {:Terceto.crearTerceto("CMP","["+Terceto.contador+"]","["+(Terceto.contador-1)+"]");Terceto.condicion=Terceto.crearTerceto(""+operaIf,"_ETIQ_"+(Terceto.contador+1),"_"); pilaIfSaltos.add(Terceto.condicion);:}
	|NOT OPEN_BRACKET comparacion CLOSE_BRACKET{:String aux_operaIf = Terceto.invertirComparador(operaIf);Terceto.crearTerceto("CMP","_","_");Terceto.condicion=Terceto.crearTerceto(""+aux_operaIf,"_ETIQ_"+(Terceto.contador+1),"_"); pilaIfSaltos.add(Terceto.condicion);:};
comparacion::= expression comparador expression ;
comparador::=
	CMP_MA_IGUAL    {:operaIf = "BLT";:}
	|CMP_ME_IGUAL   {:operaIf = "BGT";:}
	|CMP_ME         {:operaIf = "BGE";:}
	|CMP_MA         {:operaIf = "BLE";:}
	|CMP_IGUAL      {:operaIf = "BNE";:}
	|CMP_DIST       {:operaIf = "BEQ";:};

assignment::= IDENTIFIER:id ASSIG STRCONSTANT:constant{:Terceto.insertarElementoEnTS(""+constant,""+constant,"String",0);Terceto.crearTerceto("=",""+id,""+constant);:};
assignment ::= IDENTIFIER:id ASSIG expression {: Terceto.assignment=Terceto.crearTerceto("=",""+id,"["+Terceto.expression+"]");  System.out.print(",1" );:};
expression ::= expression PLUS term {:Terceto.expression=Terceto.crearTerceto("+","["+Terceto.expression+"]","["+Terceto.term+"]");System.out.print(",2" );:};
expression ::= expression SUB term {:Terceto.expression=Terceto.crearTerceto("-","["+Terceto.expression+"]","["+Terceto.term+"]");System.out.print(",3" );:};
expression ::= term {:Terceto.expression= Terceto.term; System.out.print(",4" );:};
term ::= term MULT factor {:Terceto.term=Terceto.crearTerceto("*","["+Terceto.term+"]","["+Terceto.factor+"]");System.out.print(",5" ); :};
term ::= term DIV factor {:Terceto.term=Terceto.crearTerceto("/","["+Terceto.term+"]","["+Terceto.factor+"]");System.out.print(",6" ); :};
term ::= factor {:Terceto.term = Terceto.factor;System.out.print(",7" );  :};
factor ::= IDENTIFIER:id  {: Terceto.factor=Terceto.crearTerceto(""+id,"_","_");System.out.print(",8"); :};
factor ::= INTEGER_CONSTANT:constant {:Terceto.insertarElementoEnTS(""+constant,""+constant,"Int",0);Terceto.factor=Terceto.crearTerceto(""+constant,"_","_"); System.out.print(",9"); :};
factor ::= FLOATCONSTANT:constant {:Terceto.insertarElementoEnTS(""+constant,""+constant,"Float",0); Terceto.factor=Terceto.crearTerceto(""+constant,"_","_"); System.out.print(",10" ); :};
factor ::= {:pilaExp.add(Terceto.expression);pilaExp.add(Terceto.term);:}OPEN_BRACKET expression CLOSE_BRACKET {:Terceto.factor = Terceto.expression;Terceto.term =pilaExp.removeLast();Terceto.expression = pilaExp.removeLast(); System.out.print(",11"); :};